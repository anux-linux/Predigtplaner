/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sbb.gui;

import java.util.ArrayList;
import java.util.List;

import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.event.ChangeEvent;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

import sbb.helper.date.DateChangeListener;
import sbb.helper.date.DateHelper;

/**
 *
 * @author Antonio
 */
public class PlanerPanel extends JPanel implements DateChangeListener {

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JScrollPane calendarScrollPane;
    private JTable mainTableCalendar;
    // End of variables declaration//GEN-END:variables

    private final DateHelper dateHelper;

    /**
     * Creates new form PlanerPanel
     */
    public PlanerPanel() {
	this.dateHelper = DateHelper.getDateHelperInstance();
	this.dateHelper.addDateChangeListener(this);
	this.initPanel();

    }

    private void initPanel() {
	this.initComponents();
	this.createScrollPanel();
	this.createCalendar();
	this.createTableModel();
	this.updateColumnWidth();
	this.createSorter();
    }

    private void updatePanel() {
	this.createTableModel();
	this.updateColumnWidth();

    }

    private void createScrollPanel() {
	this.calendarScrollPane = new JScrollPane();
	add(calendarScrollPane);
    }

    private void createCalendar() {
	mainTableCalendar = new JTable();
	mainTableCalendar.setColumnSelectionAllowed(true);
	mainTableCalendar.getColumnModel().getSelectionModel()
		.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);

	calendarScrollPane.setViewportView(mainTableCalendar);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
	setLayout(new BoxLayout(this, BoxLayout.LINE_AXIS));
    }

    private void createSorter() {

	RowSorter<TableModel> sorter = new TableRowSorter<TableModel>(mainTableCalendar.getModel()) {
	    @Override
	    public boolean isSortable(int column) {
		return column < 1;
	    }
	};
	List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>();
	sortKeys.add(new RowSorter.SortKey(0, SortOrder.DESCENDING));
	sorter.setSortKeys(sortKeys);
	mainTableCalendar.setRowSorter(sorter);
    }

    private void createTableModel() {

	TableModel mainModel = new MyTableModel();
	mainTableCalendar.setModel(mainModel);

    }

    private void updateColumnWidth() {
	TableColumnModel tcm = mainTableCalendar.getColumnModel();
	int colCount = tcm.getColumnCount();

	for (int i = 0; i < colCount; i++) {
	    if (i > 0) {
		// Setting the width of days Columns
		tcm.getColumn(i).setMaxWidth(30);
	    }
	    // Setting the width of the name Column
	    tcm.getColumn(i).setMinWidth(100);

	}
    }

    @Override
    public void dateChanged(ChangeEvent ce) {
	updatePanel();
    }

}
